```
#include<stdio.h>
#include<string.h>
#define n 50
#define maxval 100
typedef struct{
	char c;
	int times;
	int appear;
}Pro;
Pro message[n];

typedef struct{ //因为二叉树的特点所定义的哈夫曼树结构应该包含四个信息 
	int weight;  //所在结点的权值 
	int parent,lchild,rchild;  //所在结点的左儿子右儿子以及父结点所在数组的下标 
	char trc;  //权值对应的字符 
}hufmtree;
hufmtree tree[n]; 

typedef struct{
	char bits[n];  //n为哈夫曼的树中叶子结点的数目，编码的长度不可能超过n；
	int start;
	char ch;  //与编码对应的字符
}Codetype;
Codetype code[n]; //有n个字符的编码 

void Input(char str[]);
void Huffman(hufmtree tree[],Pro message[]);
void HuffmanCode(hufmtree tree[]);

int main()
{
	char str[n];
	printf("请输入所要编码的原文：\n"); 
	Input(str);
	printf("----------------------------------------------------------------------------------------\n");
	Huffman(tree,message);
	HuffmanCode(tree);
	return 0;
}

void Input(char str[]){ 
	
	int i,j,k,len; 
	scanf("%s",str);
	len = strlen(str);
	for(i = 0;i < len;i++)
	{
		message[i].c = str[i];
		message[i].times = 1;
		message[i].appear = 0;
	}

	for(i = 0;i < len;i++)
	{
		if(message[i].appear == 1) continue;
		else
		{
			for(j = i+1;j < len;j++)
			{
				if(message[i].c == message[j].c)
				{
					message[i].appear = message[j].appear = 1; 
				} 
			}//此循环将重复出现的字符标记为1 
		}
	}
	for(i = 0;i < len;i++)
	{
		if(message[i].appear == 0)
		{
			printf("		输入语句中字符 %c 出现的次数为:1\n\n ",message[i].c);
		}
		else if(message[i].appear == 1)
		{
			for(j = i+1;j < len;j++)
			{
				if(message[i].c == message[j].c)
				{
					message[i].times ++;
					message[j].appear = -1;
				}
			}
		}
		else if(message[i].appear == -1) continue;
	}
	for(i = 0;i < len;i++)
	{
		if(message[i].appear == 1)
		{
			printf("		输入语句中的字符 %c 出现的次数为:%d\n\n",message[i].c,message[i].times);
		}
	}
}
//Input()函数实现了计算各字符出现的次数,并将其作为权值
 
void Huffman(hufmtree tree[],Pro message[])
{
	int i,j,m,k = 0,p1,p2;
	int small1,small2,f;
	for(i = 0;i < m;i++)
	{
		tree[i].lchild = 0;
		tree[i].parent = 0;
		tree[i].rchild = 0; 
		tree[i].weight = 0;
	}
	for(i = 0;i < n;i++)
	{
		//此循环用于给哈夫曼树各子叶赋权值 
		if(message[k].appear != -1)
		{
			tree[i].weight = message[k].times;
			tree[i].trc = message[k].c;
			k++; 
		}
		else
		{
			k++;
			i--;
		 } 
	}
	k = 0,i = 0;
	while(tree[i].trc)
	{
		k++;
		i++; 
	}
	m = 2*k-1;
	//这里并没有采用排序的方式， 
	for(i = k;i < m;i++) //进行n-1次合并 
	{
		//p1,p2每次用来记录俩孩子的下标 
		p1 = p2 = 0;
		//small1为最小值 small2为次小值 
		small1 = small2 = maxval;
		for(j = 0;j <= i-1;j++)
		{
			if(tree[j].parent == 0)
			{
				if(tree[j].weight < small1)
				{
					small2 = small1;
					small1 = tree[j].weight;
					p2 = p1;
					p1 = j;  
				}
				else if(tree[j].weight < small2)
				{
					small2 = tree[j].weight;
					p2 = j;
				}
				tree[p1].parent = tree[p2].parent = i;
				tree[i].weight = tree[p1].weight + tree[p2].weight; 
				tree[i].lchild = p1;
				tree[i].rchild = p2;
			}
		}
	}
}
//此函数用来生成每个字符所对应的哈夫曼编码 
void HuffmanCode(hufmtree tree[])
{
	int i,j,p,k,m;
	//------------
	k = 0,i = 0;
	while(tree[i].trc)
	{
		k++;
		i++;
	}
	m = 2*k-1;
	//------ 上一个函数中的重复代码

	for(i = 0;i < k;i++)
	{
		code[i].start = k-1;
		j = i;
		p = tree[i].parent;
		while(p!=0)
		{
			if(tree[p].lchild == j)
				code[i].bits[k-1] = '0';
			else code[i].bits[k-1] = '1';
			code[i].start--;
			j = p;
			p = tree[p].parent;
		}
		
	}
	for(i = 0; i < k; i++)
	{
		printf("字符%c的哈夫曼编码为：%s",tree[i].trc,code[i].bits);
	} 
 }
 
void trans()
{
	char tran[n]; 
	printf("请输入一段哈夫曼编码：");
	scanf("%s",tran);
	
	 
}  
```
